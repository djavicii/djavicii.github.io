[{"categories":null,"content":"show love for Avicii int main(){ printf(\"We love avicii\"); return 0; } ","date":"2021-10-26","objectID":"/firstpost/:0:0","tags":null,"title":"Firstpost","uri":"/firstpost/"},{"categories":null,"content":"Study this and master everything you needed for embedded systems and computer architecture ","date":"0001-01-01","objectID":"/2021-7-14-learn-magic-of-computers/:0:0","tags":null,"title":"Learn Magic of Computers","uri":"/2021-7-14-learn-magic-of-computers/"},{"categories":null,"content":"Basics You need to know Comptia A+ Highly recommended to those who doesn’t know anything about computers. Comptia Network+ Highly recommended to those who doesn’t know anything about networking. C programming SQL What is kernels? More about Kernels what is software drivers? what is BIOS and UEFI? Common things in BIOS Why BIOS is important? The principal job of a computer’s BIOS is to govern the early stages of the startup process, ensuring that the operating system is correctly loaded into memory. BIOS is vital to the operation of most modern computers, and knowing some facts about it could help you troubleshoot issues with your machine. What is firmware? What is a Hypervisor? What is Hypervisor? A hypervisor is computer software, firmware or hardware that creates and runs virtual machines. A computer on which a hypervisor runs one or more virtual machines is called a host machine, and each virtual machine is called a guest machine. Learning the linux kernel ","date":"0001-01-01","objectID":"/2021-7-14-learn-magic-of-computers/:1:0","tags":null,"title":"Learn Magic of Computers","uri":"/2021-7-14-learn-magic-of-computers/"},{"categories":null,"content":"Books for Deep Studies Highly recommended Art of Electronics Digital Computer Electronics Let us C Understanding Linux Kernels The Art of Linux Kernel Design Linux Kernel Development Building Firmware Comptia A+ Comptia Network+ Feyman Lectures on Computation Programming Embedded Systems: With C and GNU Development Tools C++ Network Programming V1 C++ Network Programming V2 ","date":"0001-01-01","objectID":"/2021-7-14-learn-magic-of-computers/:2:0","tags":null,"title":"Learn Magic of Computers","uri":"/2021-7-14-learn-magic-of-computers/"},{"categories":null,"content":"Building Computer System Electronics Electronics 2 Electronics MIT Need College level Maths Digital circuits and Systems Electronics-Digital Computer Organizations Introduction to Embedded Systems Introduction to Embedded System Design Learn Embedded System Design on ARM based microcontrollers Computer Architecture and Organisation Computer Networks and Internet Protocol Introduction to Operating Systems Operating Systems Building linux from Scratch Linux kernel Development Digital computer Organization Digital circuits and systems Most Loved Ben eater’s 8-bit Computer System on Bread Board Building Simple Linux From Scratch Build your own OS from scratch ","date":"0001-01-01","objectID":"/2021-7-14-learn-magic-of-computers/:3:0","tags":null,"title":"Learn Magic of Computers","uri":"/2021-7-14-learn-magic-of-computers/"},{"categories":null,"content":"Skill Development Linux Security If you need hands-on experience for security then go for OSCP study Don’t Limit Yourself If you need more resources then email me on electrokid.amk@gmail.com ","date":"0001-01-01","objectID":"/2021-7-14-learn-magic-of-computers/:4:0","tags":null,"title":"Learn Magic of Computers","uri":"/2021-7-14-learn-magic-of-computers/"},{"categories":null,"content":"Topics Coverd: Netwrok Programming and C OSI and TCP/IP The Internet Protocol IPv4 and IPv6 Domain Names Internet Protocol routing Network Address translation some more Topics ","date":"0001-01-01","objectID":"/2021-7-13-basics/:1:0","tags":["Blogging","Networking"],"title":"Networking Basics","uri":"/2021-7-13-basics/"},{"categories":null,"content":"The internet and C millions of desktops, laptops,routers and servers conneted to the internet and have been for decades. the new Internet of Things(IoT) trend atracting peoples to use and learn Networking. Almost every network stack is programmed in C. This is true for Windows, Linux, and macOS. If your mobile phone uses Android or iOS, then even though the apps for these were programmed in a different language (Java and Objective C), the kernel and networking code was written in C. It is very likely that the network routers that your internet data goes through are programmed in C. Even if the user interface and higher-level functions of your modem or router are programmed in another language, the networking drivers are still probably implemented in C. OSI model (Open Systems Interconnection) The most popular layer system for networking is called the Open Systems Interconnection model (OSI model). It was standardized in 1977 and is published as ISO 7498. It has seven layers Layer number Layer 7 Application 6 presentation 5 Session 4 Transport 3 Network 2 Data Link 1 Physical 1.Physical : voltage levels on an ithernet cables,the readio frequency of Wifi etc…. 2.Data link : this level build on physical layer, It deals with protocols for directly communicating between two nodes.It defines how a direct message between nodes starts and ends (framing), error detection and correction, and flow control. 3.Network layer : the netwrok layer provides the methods to transmit data sequences (called packets). This is the layer that the internet protocol is defined on. 4.Transport Layer : at this layer we hace methods to reliably deliver variable length data between hosts. the The transmission control protocol(TCP) and User datagram protocol(UDP) are commonly said to exist on this layer 5.Session Layer: this layer build on the transport later by adding methods to establish, checkpoint, suspend,resume, and terminate dialogs. 6.Presentation Layer: this is the lowest layer at which data structure and presentation for an appliation are defined. Concerns such as data encoding , serialization, and encryption are handled here. 7.Application layer: The application that the user interfaces with(Ex. web browser and email clients etc….). TCP/IP (Transmission Control Protocol/Internet Protocol) OSI model has 7 layers were TCP/IP has 4 layers Layer number Layer 4 Process/Application 3 Host-to-Host 2 internet 1 Network Access In both models , same function are performed;they are just divided diffrently. 1.Network Access : physical connection and data framing happen.(for Example, sending Ethernet and Wi-Fi packet). 2.Internet : This layer deals with the concerns of addressing packets and routing them over multiple interconnection networks. IP address is defined at this layer. 3.Host-to-Host : this provides two protocols TCP/IP and UDP.These protocols address concerns such as data order,data segmentation,network congestion, and error correction. 4.Process/Application layer : protocols such as HTTP, SMTP, and FTP are implemented. ","date":"0001-01-01","objectID":"/2021-7-13-basics/:2:0","tags":["Blogging","Networking"],"title":"Networking Basics","uri":"/2021-7-13-basics/"},{"categories":null,"content":"How data Encapsulate/Decapsulate OSI Model TCP/IP Model Internet Protocol there are two Versions IPv4 IPv6 IPv4 : IPv4 uses 32-bit addresses, which limits it to addressing no more than 232 or 4,294,967,296 systems. However, these 4.3 billion addresses were not initially assigned efficiently, and now many Internet Service Providers (ISPs) are forced to ration IPv4 addresses IPv6 : IPv6 was designed to replace IPv4 and has been standardized by the Internet Engineering Task Force (IETF) since 1998. It uses a 128-bit address, which allows it to address a theoretical 2128 = 340,282,366,920,938,463,463,374,607,431,768,211,456, or about a 3.4 x 1038 addresses how it would be What is address? All internet protocol traffic routes to and address. IPv4 addresses are 32 bits long. They are commonly divided into four 8-bit sections. Each section is displayed as a decimal number between 0 and 255 inclusive and is delineated by a period. Example 0.0.0.0 127.0.0.1 10.0.0.0 176.15.0.1 192.168.1.1 255.255.255.255 A special address, called the loopback address, is reserved at 127.0.0.1. this means establish a connection to myself. Operating systems short-circuit thisaddress so that packets to it never enter the network but instead stay local on theoriginating system. ","date":"0001-01-01","objectID":"/2021-7-13-basics/:3:0","tags":["Blogging","Networking"],"title":"Networking Basics","uri":"/2021-7-13-basics/"},{"categories":null,"content":"IPv4 reserves some address ranges for private use. if you’re using IPv4 through a router/NAT, then you are likely using an IP address in one of the ranges. 10.0.0.0 to 10.255.255.255 172.16.0.0 to 172.31.255.255 192.168.0.0 to 192.168.255.255 There is shorthand notation for writing them. Using Classless Inter-Domain Routing (CIDR) notion, we can write the three previous address range as follows: 10.0.0.0/18 172.16.0.0/12 192.168.0.0/16 CIDR notation works by specifying the number of bits that are fixed. For example, 10.0.0.0/8 specifies that the first eight bits of the 10.0.0.0 address are fixed,the first eight bits being just the first 10. part; the remaining 0.0.0 part of the address canbe anything and still be on the 10.0.0.0/8 block. Therefore, 10.0.0.0/8 encompasses 10.0.0.0 through 10.255.255.255 IPv6 IPv6 addresses are 128 bits long. They are written as eight groups of four hexadecimalcharacters delineated by colons. A hexadecimal character can be from 0-9 or from a-f. Hereare some examples of IPv6 addresses: 0000:0000:0000:0000:0000:0000:0000:0001 2001:0db8:0000:0000:0000:ff00:0042:8329 fe80:0000:0000:0000:75f4:ac69:5fa7:67f9 ","date":"0001-01-01","objectID":"/2021-7-13-basics/:3:1","tags":["Blogging","Networking"],"title":"Networking Basics","uri":"/2021-7-13-basics/"},{"categories":null,"content":"Rules for shortening IPv6 Leading zeros in each section to be omitted(ex. 0db7= db7) consecutive sections of zeros to be replaced with the double colon :: example : : 1 2001:db7:ab5:ff0 fe80:75d6:abb7:65af ffff:ffff:ffff:ffff Like IPv4, IPv6 also has a loopback address ::1 Dual-stack implementations also recognize a special class of IPv6 address that map directly to an IPv4 address. These reserved addresses start with 80 zero bits, and then by 16 one bits, followed by the 32-bit IPv4 address. Using CIDR notation, this block of address is ::ffff:0:0/96 IPv6 Address Mapped IPv4 Address ::ffff:10.0.0.0 10.0.0.0 ::ffff:172.16.0.5 172.16.0.5 etc…. Another address type that you should be familiar with are link-local addresses. Link-local addresses are usable only on the local link. Routers never forward packets from these addresses. They are useful for a system to accesses auto-configuration functions before having an assigned IP address. Link-local addresses are in the IPv4 169.254.0.0/16 address block or the IPv6 fe80::/10 address block If you think that IPv4 addresses are difficult to memorize, and IPv6 addresses impossible, then you are not alone. Luckily, we have a system to assign names to specific addresses. Domain names The Internet Protocol can only route packets to an IP address, not a name. So, if you try to connect to a website, such as example.com, your system must first resolve that domain name, example.com, into an IP address for the server that hosts that website. This is done by connecting to a Domain Name System (DNS) server. You connect to a domain name server by knowing in advance its IP address. The IP address for a domain name server is usually assigned by your ISP. we all serve through public DNS servers like Google, Cloudflare etc…. To resolve a hostname, your computer sends a UDP message to your domain name serverand asks it for an AAAA-type record for the domain you’re trying to resolve. If this record exists, an IPv6 address is returned. You can then connect to a server at that address to load the website. if no AAAA record exist, then your computer queries server for A type record. if this record will exist then you receive IPv4 address. Internet routing the internet today has an estimated 20 billion devices connected. When you make a connection over the internet, your data first transmits to your local router, from there it transmited to another router which is connected to another router and that is connected to receiving device, at which point, the data reached its destination. imagine each router in the preceding diagram is connected to tens,hundreds, or even thousands of other router and systems. you can see this devices using tools like tracert on windows traceroute on Linux in this images you can see the IP address, each one of them are devices. later we can see how proxy chains and Tor networks works (in Hacking section). Local networks and address translation as we know previously, there are IPv4 addresses ranges reserved for use in the small local networks. private ranges: 10.0.0.0 to 10.255.255.255 172.16.0.0 to 172.31.255.255 192.168.0.0 to 192.168.255.255 when a packet originates from a device on an IPv4 local network, it must undergo Netwok Address Translation(NAT) before being routed on the internet. A router that implements NAT remembers which local address a connection is established from. The router does this by modifying the source IP address from the original private LAN IP address to its public internet IP address. Likewise, when the router receives the return communication, it must modify the destination address from its public IP to the private IP of the original sender Subnetting and CIDR IP addresses can be split into parts. The most significant bits are used to identify the network or subnetwork, and the least significant bits are used to identify the specific device on the network. (same as your home address split into parts ) IPv4 use mask notation to identify the IP address pa","date":"0001-01-01","objectID":"/2021-7-13-basics/:3:2","tags":["Blogging","Networking"],"title":"Networking Basics","uri":"/2021-7-13-basics/"},{"categories":null,"content":"What is socket? Socket is one ednpoint of a communication link between systems. Your application sends and receives all of its network data through a socket. There are few diffrent socket application programming interfaces (APIs). Berkeley Sockets released in 1983 with 4.3BSD Unix. The terms Berkeley sockets, BSD sockets, Unix sockets, and Portable Operating System Interface (POSIX) sockets are often used interchangeably If you’re using Linux or macOS, then your operating system provides a proper implementation of Berkeley sockets. Winsock Windows socket API is called Winsock it was created to be largely compatible with Berkeley sockets. Historically, sockets were used for inter-process communication (IPC) as well as various network protocols. we use sockets only for communication with TCP and UDP Types of Sockets Sockets come in two basic types Connection-oriented and connectionless. Don’t get confused with the term connectionless. Of course, two systems communicating over a network are in some sense connected. Keep in mind that these terms are used with special meanings, which we will cover shortly, and should not imply that some protocols manage to send data without a connection Protocols that are used Most Transmission Control Protocol(TCP) (connection-oriented) User Datagram Protocol(UDP)(connectionless) Connectionless Protocol each data packet is addressed individually. From the protocol’s perspective, each data packet is completely independent and unrelated to any packets coming before or after it like UDP UDP makes no guarantee that a packet will arrive. UDP doesn’t generally provide a method to know if a packet did not arrive, and UDP does not guarantee that the packets will arrive in the same order they were sent Connetion-Oriented Protocol It requires a logical connection to be established between the two processes before data is exchanged. The connection must be maintained during the entire time that communication is taking place, then released afterwards. The process is like telephone call, were virtual circuits is established, caller must know the person telephone number and phone must be answerd before message can be deliverd example TCP, TCP needs established connections. Finally…. Socket Functions Common Socket Functions: socket() creates and initialize a new socket. bind() assigns local IP address and port number to the socket listen() to listen for new connections [only for TCP] connect() attempt to make a connection on a socket specific to the address accept() create new socket for incomming TCP connection send() and recv() used to send and recive data with socket sendto() and recvfrom() used to send data from sockets without a bound remote address close() (Berkeley sockets) and closesocket() (Winsock sockets) are used to close a socket shutdown() used to close onse side of TCP connnection. select() used to wait for an event on one or more sockets getnameinfo() translates socket address to a node name an service location. getaddrinfo() allocates and initializes a linked list of addrinfo structures for each network address that matches node an service. setsocketopt() used to change some socket options Socket Setup Before we can use sockets we need to include the socket API header files. these files vary depending on whether we are using Berkeley sockets or Winsock. Note: Winsock requires initialization before use, It also requires that a cleanup function is called when we are finished. We are writing code that compatible with both Linux/mac and Windows By using preprocessor statement #if defined(_WIN32) we can include in our program that will only compiled on Windows. ","date":"0001-01-01","objectID":"/2021-7-17-socket-programming-101/:0:0","tags":null,"title":"Socket Programming 101","uri":"/2021-7-17-socket-programming-101/"},{"categories":null,"content":"Code for initializing socket /* file: socket_initi.c */ // When windows system detected #if defined(_WIN32) #ifndef _WIN32_WINNT #define _WN32_WINNT 0x0600 # endif //must defined for winsock headers to provide all function we need #include\u003cwinsock2.h\u003e#include\u003cws2tcpip.h\u003e/*pragma statement tells the Microsoft Visual C compiler to link your program with Winsock Library ws2_32.lib*/ /* if you are using MinGW compiler then #pragma is ingnored.*/ /* in this case you need to link manually using command line using -lws2_32*/ #pragma comment(lib, \"ws2_32.lib\") #else // when Linux/MacOS detected //section includes Berkeley socket API headers and other headers needed for this platform #include\u003csys/types.h\u003e#include\u003csys/socket.h\u003e#include\u003cnetinet/in.h\u003e#include\u003carpa/inet.h\u003e#include\u003cnetdb.h\u003e#include\u003cunistd.h\u003e#include\u003cerrno.h\u003e#endif #include\u003cstdio.h\u003e int main(){ #if defined(_WIN32) WSADATA d; // WSAStartup() for Windows to initialize Winsock // MAKEWORD macro allow to request Winsock Version 2.2 if (WSAStartup(MAKEWORD(2, 2), \u0026d){ // If program unable to initialize Winsock fprintf(stderr, \"Failed to initialize.\\n\"); return 1; } #endif // When all are done! printf(\"Ready to use socket API.\\n\"); #if defined(_WIN32) // Allows windows to do additional cleanup WSACleanup(); #endif return 0; } Command for compiling and running this program on Linux/Mac gcc socket_initi.c -o socket_initi Compiling on Windows using MinGW gcc socket_initi.c -o socket_initi.exe -lws2_32 socket_initi.exe Note : -lws2_32 flag is needed to tell the compiler to link ws2_32.lib ","date":"0001-01-01","objectID":"/2021-7-17-socket-programming-101/:0:1","tags":null,"title":"Socket Programming 101","uri":"/2021-7-17-socket-programming-101/"}]